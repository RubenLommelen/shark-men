Story PL1:
-Classes needed: parkingLot, contactPerson, Address, postalCode, Category (enum)

-Database: parking_lot, person, address
-Endpoint: POST parking-lots
-Tests: 
	-endpoint test
	-database test
	-edge cases (email, phone numbers,...)
-Questions: 
	-what are the rules for valid e-mail addresses? Only regex
	-Which fields are required? All
-Complexity: 13

Story ME1:
-Classes needed: Member, LicensePlate
-Database: member
-Endpoint: POST members
-Tests: 
	-endpoint test
	-database test
	-edge cases (email, phone numbers,...)
-Questions: 
	-Does address for member have same structure as a contact person of a parking lot? Yes
	-Can one member have multiple license plates? No
	-Can we assume one member per car? Or multiple? One car per member (except Gold)
	-Which fields are required? All
-Complexity: 5
-Comments: 
	-use Java Time API: https://www.baeldung.com/jpa-java-time
	-one-to-one relationship between name and license plate

Story PSA1:
-Classes needed: ParkingAllocation
	-id
	-memberId
	-licensePlate
	-parkingLotId
	-startTime
-Database: parking_allocation
-Endpoint: POST allocations
-Tests:
	-edge cases (existing member, license plate check, existing parking lot, capacity)
-Questions: -for parking allocation, does member need to receive other information than id? (for DTO), only ID is ok
-Complexity: 8

Story PSA2: 
-Classes: add StopTime field
-Database: 
-Endpoint: POST allocations/id/stop
-Questions: 
	-does allocation need to be soft deleted? is StopTime enough? Or hard deleted? Doesn't need to be deleted, useful to have a stopTime
	-Should a parkingAllocation have a status? Or enough to see that it doesn't have an enddate? a GetStatus method? Customer just wants to see a status per allocation, how we do it internally is up to us
-Complexity: 5

Story ML1:
-Classes: enum Membership level
-Database: add membership_level to member table
-Questions: 
	-what to do with people that park longer than maximum time? No extra effort needed
	-save values in database or enough to save it in an enum? Save it in enum is enough, you actually don't need to save monthly fee as long as invoices aren't implemented
-Complexity: 3

Story DI1:
-Classes: Division
-Database: division
-endpoint: POST divisions
-Questions:
	-Director: should it just be a String, or more? Just a String is fine
-Complexity: 3

Story DI2:
-New classes: -
-Database: division
-endpoint: GET divisions
-Questions:
-Complexity: 1

